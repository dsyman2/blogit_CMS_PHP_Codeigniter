/* *********************************************************************************************************************
 * Global variables
 */





/* *********************************************************************************************************************
 * Main func
 */
jQuery(function() {

    /*
     * NAVIGATION TRANSFORM FOR MOBILE VERSION
     */
    selectnav('mainnav', {
        label: 'Main navigation',
        nested: true,
        indent: '-'
    });

	// Add icon after selectnav
	if ( $('.selectnav').length > 0 ) {
		var snav = $('.selectnav');

		$(window).resize(function() {
			snav.css({
				'width': $(this).width() - 68
			});
		}).resize();

		snav.after('<i class="selnav icon-align-justify"></i>');
	}

    // Hide default form fields value on focus
	if ( $('input[type="text"], textarea').length > 0 ) {
        $('input[type="text"], textarea').inputDefaultValue();
	}

    // Tagline with image caption bg height
	if ( $('.taglineimg .caption-bg').length > 0 ) {

		$(window).resize(function() {
			var capt = $('.taglineimg');
            var h = 0;
            var ch = capt.find('.caption').height();
            var cp = parseInt(capt.find('.caption').css('padding-top'));   // padding
            h = (capt.height() - ch > cp*2)  ? ch : capt.height() - cp*2;
			//alert(capt.height() + ' ' + capt.find('.caption').height()) ;
            capt.find('.caption-bg').css({
				'height': h
			});
		}).resize();
	}



	// Align tagline with image arrow -> left
	if ( $('.taglineimg .arrow').length > 0 ) {

		$(window).resize(function() {
			var arrow = $('.taglineimg .arrow');
			var pos = $('.arrow').position();

			arrow.css({
				'left': pos.left + 10
			});
		}).resize();
	}

    // Main nav dropdown
    if ( $('header nav ul').length > 0 ) {
        $('header nav ul').multipleDropDown();
        //multipleDropDown( $('header nav ul') );
    }

    /*
     * HOMEPAGE SLIDER SETTINGS
     */
    var slidesSelector = '.slides';
    var slides = $(slidesSelector);
    if (slides.length > 0) {
        slides.flexslider( {

            namespace: "flex-",             //{NEW} String: Prefix string attached to the class of every element generated by the plugin
            selector: ".slides_container > div",       //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
            animation: "slide",              //String: Select your animation type, "fade" or "slide"
            easing: "swing",               //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
            direction: "horizontal",        //String: Select the sliding direction, "horizontal" or "vertical"
            reverse: false,                 //{NEW} Boolean: Reverse the animation direction
            animationLoop: true,             //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
            smoothHeight: true,            //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode
            startAt: 0,                     //Integer: The slide that the slider should start on. Array notation (0 = first slide)
            slideshow: true,                //Boolean: Animate slider automatically
            slideshowSpeed: 7000,           //Integer: Set the speed of the slideshow cycling, in milliseconds
            animationSpeed: 600,            //Integer: Set the speed of animations, in milliseconds
            initDelay: 0,                   //{NEW} Integer: Set an initialization delay, in milliseconds
            randomize: false,               //Boolean: Randomize slide order

            // Usability features
            pauseOnAction: true,            //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
            pauseOnHover: false,            //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
            useCSS: true,                   //{NEW} Boolean: Slider will use CSS3 transitions if available
            touch: true,                    //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
            video: false,                   //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches

            // Primary Controls
            controlNav: false,               //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
            directionNav: true,             //Boolean: Create navigation for previous/next navigation? (true/false)
            prevText: "Previous",           //String: Set the text for the "previous" directionNav item
            nextText: "Next",               //String: Set the text for the "next" directionNav item

            // Secondary Navigation
            keyboard: true,                 //Boolean: Allow slider navigating via keyboard left/right keys
            multipleKeyboard: false,        //{NEW} Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
            mousewheel: false,              //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
            pausePlay: false,               //Boolean: Create pause/play dynamic element
            pauseText: 'Pause',             //String: Set the text for the "pause" pausePlay item
            playText: 'Play',               //String: Set the text for the "play" pausePlay item

            // Special properties
            controlsContainer: "",          //{UPDATED} Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.
            manualControls: "",             //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
            sync: "",                       //{NEW} Selector: Mirror the actions performed on this slider with another slider. Use with care.
            asNavFor: "",                   //{NEW} Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider

            // Carousel Options
            itemWidth: 0,                   //{NEW} Integer: Box-model width of individual carousel items, including horizontal borders and padding.
            itemMargin: 0,                  //{NEW} Integer: Margin between carousel items.
            minItems: 0,                    //{NEW} Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
            maxItems: 0,                    //{NEW} Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
            move: 0,                        //{NEW} Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.

            // Callback API
            start: function(){

            },            //Callback: function(slider) - Fires when the slider loads the first slide
            before: function(){},           //Callback: function(slider) - Fires asynchronously with each slider animation
            after: function(){},            //Callback: function(slider) - Fires after each slider animation completes
            end: function(){},              //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous)
            added: function(){},            //{NEW} Callback: function(slider) - Fires after a slide is added
            removed: function(){}           //{NEW} Callback: function(slider) - Fires after a slide is removed

        });
    }

    /*
     * TWITTER WIDGETS
     */
    $('div[class^="tweets-"]').each( function(){
        var me = $(this);
        $(this).tweetMachine( (me.attr('rel') ? me.attr('rel') : 'ishyoboydotcom') , {
            limit: parseInt($(this).attr('class').substr(7), 10),
            endpoint: 'statuses/user_timeline',
            //backendScript:  '/assets/',
            autoRefresh: false,
            tweetFormat: "<div class='tweet'><div class='text'></div><div class='tweet-details'><a href='' class='time'></a></div></div>"
        });
    });

    /*
     * ISOTOPE
     */

    var isotSelector = '.isotope';
    var isot = $(isotSelector);
    if (isot.length > 0){
        isot.imagesLoaded( function(){

            var colCount = Math.floor(isot.width() / isot.children().width());
            var margin =  (isot.width() / colCount) - isot.children().width();
            margin = (margin < 20 ) ? 20 : margin;

            isot.children().css({
                'margin-right': 0,
                'margin-bottom': margin
            });

            isot.css({
                'visibility': 'visible'
            });

            isot.isotope({
                itemSelector : isotSelector + ' > div',
                resizable: true,
                animationEngine : 'best-available',
                animationOptions: {
                    duration: 800,
                    easing: 'swing',
                    queue: false
                },
                masonry: {
                    columnWidth: isot.width() / colCount
                }
            },

            function(){
                // After isotope loaded
            });


            if ($('.isotope-loading').length > 0){

                isot.infinitescroll({
                        navSelector  : '.isotope-loading',    // selector for the paged navigation
                        nextSelector : '.isotope-loading a',  // selector for the NEXT link (to page 2)
                        itemSelector : isotSelector + ' > div',     // selector for all items you'll retrieve
                        loadingText  : 'Loading <span>more</span> ...',
                        doneText     : 'No more posts',
                        debug: false,
                        animate: false
                    },
                    // call Isotope as a callback
                    function( newElements ) {

                        var $newElems = $( newElements ).css({
                            opacity: 0,
                            'margin-right': 0,
                            'margin-bottom': margin
                        });

                        // ensure that images load before adding to Isotope layout
                        $newElems.imagesLoaded(function() {
                            // show elems now they're ready
                            $newElems.animate({ opacity: 1 });
                            function appended(){
                                // New items loaded and added to stage
                                $('.item').find('.post-content').mouseenter(function(){
                                    $(this).find('h2').height($(this).find('h2').parent().parent().height()).width($(this).find('h2').parent().parent().width());
                                    $(this).parent().addClass('icon-plus');
                                });
                                $('.item').find('.post-content').mouseleave(function(){
                                    $(this).parent().removeClass('icon-plus');
                                });
                            }
                            // Used if the items should not be filtered
                            //isot.isotope( 'appended', $newElems, appended());

                            // Used if the filter should be applied to the items being added
                            isot.isotope( 'insert', $newElems, appended());



                        });
                    }
                );
            }

            $(window).smartresize(function(){
                var colCount = Math.floor(isot.width() / isot.children().width());
                var margin =  (isot.width() / colCount) - isot.children().width();
                margin = (margin < 20 ) ? 20 : margin;

                isot.isotope({
                    // update columnWidth to a percentage of container width
                    masonry: { columnWidth: isot.width() / colCount }
                });

                isot.children().css('margin-bottom', margin);
            });


            // Filters activation
            var filterSelector = '.filters';
            var filter = $(filterSelector);
            if ( filter.length > 0 ) {


                // Set default filter if none set
                if (!filter.find('a.active').length > 0){
                    filter.find('a').eq(0).parent().addClass('active');
                }

                // Isotope filterable menu
                $(filterSelector + ' a').click(function(){

                    // get href attr, remove leading #
                    var href = $(this).attr('href').replace( /^#/, '' ),
                    // convert href into object
                    // i.e. 'filter=.inner-transition' -> { filter: '.inner-transition' }
                        option = $.deparam( href, true );
                    // set hash, triggers hashchange on window
                    $.bbq.pushState( option );

                    // Hover
                    $(filterSelector + ' ul li').removeClass('active');
                    $(this).parent().addClass('active');

                    return false;
                });


                $(window).bind( 'hashchange', function( event ){
                    // get options object from hash
                    var hashOptions = $.deparam.fragment();
                    // apply options from hash
                    isot.isotope( hashOptions );

                    // Hover
                    $(filterSelector + ' ul li').removeClass('active');
                    if (hashOptions.filter){
                        filter.find('a[href="#filter=' + hashOptions.filter + '"]').parent().addClass('active');
                    }
                    else{
                        filter.find('a[href="#filter=*"]').parent().addClass('active');
                    }


                })
                    // trigger hashchange to capture any hash data on init
                    .trigger('hashchange');
            }

        });
    }

    $('.item').find('.post-content').mouseenter(function(){
        var $title =  $(this).find('h2');
        $title.height($title.parent().height()).width($title.parent().width());
        $(this).parent().addClass('icon-plus');
    });

    $('.item').find('.post-content').mouseleave(function(){
        $(this).parent().removeClass('icon-plus');
    });



    /*
     * Google Maps
     */
    var $mapObject = $('.google-map');
    if ($mapObject.length > 0){
        $mapObject.initGoogleMaps();
    }
    /**/



	/*
	 * Dribbble widget
	 */
	var bbb = $('.dribbble-widget');

	if ( bbb.length > 0 ) {
		$.jribbble.getShotsByPlayerId( (bbb.attr('data-user-name') ? bbb.attr('data-user-name') : 'IshYoBoy') , function(playerShots) {
			var html = '';

			$.each(playerShots.shots, function(i, shot) {
				html += '<a href="' + shot.url + '">';
				html += '<img src="' + shot.image_teaser_url + '" ';
				html += 'alt="' + shot.title + '"></a>';
			});

			bbb.html(html);
		}, {
			page: 1,
			per_page: 9
		});
	}



	/*
	 * Flickr widget
	 */
	var widgetFlickr = $('.widget-flickr');

	if ( widgetFlickr.length > 0 ) {
		var userid = widgetFlickr.attr('data-user-id');
		var count = widgetFlickr.attr('data-count');
		var api = 'http://api.flickr.com/services/feeds/photos_public.gne?lang=en-us&format=json&jsoncallback=?';
		var cinit = 0;

		widgetFlickr.append('<ul/>');

		if (userid != '') api += '&id=' + userid;

		// Send request
		$.getJSON(api, function(data){

			$.each(data.items, function(i,item){

				if ( cinit < count ) {
					$("<img/>").attr("src", item.media.m).appendTo( widgetFlickr.children('ul') ).wrap("<li><a href='" + item.link + "' target=\"_blank\"></a></li>");

					cinit++;
				}

			});

		});
	}



	/*
	 * HTML5 placeholder
	 */
	if( !isPlaceholder() ) {
		var placeholder = $('[placeholder]');

		placeholder.focus(function() {
			var input = $(this);

			if ( input.val() == input.attr('placeholder') ) {
				input.val('').removeClass('placeholder');
			}
		}).blur(function() {
				var input = $(this);

				if ( input.val() == '' || input.val() == input.attr('placeholder') ) {
					input.addClass('placeholder').val( input.attr('placeholder') );
				}
			}).blur();

		placeholder.parents('form').submit(function() {
			$(this).find('[placeholder]').each(function() {
				var input = $(this);

				if ( input.val() == input.attr('placeholder') ) {
					input.val('');
				}
			});
		});
	}



	/*
	 * Validate contact form
	 */
	var $cf = $('.validate');

    if ($cf.length > 0){
        $cf.validate({
            // Disable error message
            errorPlacement: function (error, element) {}
        });

        if ( location.hash ) {
            if ( location.hash == '#thank-you' ) {
                alert('Thank you, your message has been successfully sent');
                location.hash = '';
            }
            else if ( location.hash == '#error' ) {
                alert('Sorry, your message hasn\'t been sent, please try it again');
                location.hash = '';
            }
        }
    }



	/*
	 * Accordion
	 */
	var acc = $('.accordion');

	if ( acc.length > 0 ) {
		// for each accordion on page
		acc.each(function() {
			var accDel = 250;
			var _this = $(this);

			// pointers all
			_this.find('.acc-title').prepend('<i class="pointer icon-caret-right" />');

			// pointer active
			_this.find('.active i.pointer').removeClass('icon-caret-right').addClass('icon-caret-down');

			// Hide all apart from 'active'
			_this.find('li').not('.active').children('div').hide();

			_this.find('.acc-title').click(function() {
				// close opened + remove 'active' class + change pointer to left
				_this.find('.active div').stop().slideUp(accDel);
				_this.find('li').removeClass('active');
				_this.find('i.pointer').removeClass('icon-caret-down').addClass('icon-caret-right');

				// open clicked + add 'active' class + change pointer to down
				$(this).siblings('div').stop().slideDown(accDel);
				$(this).parent('li').addClass('active');
				$(this).find('i.pointer').removeClass('icon-caret-right').addClass('icon-caret-down');
			});
		});
	}

});





/* *********************************************************************************************************************
 * Functions
 */

function  initialize(){
    var $mapObject = $('.google-map');
    // Google Maps module
        var styles = [
            {
                "stylers": [
                    //{ "invert_lightness": true },
                    { "hue": rgb2hex($mapObject.css('color'))}
                ]

            },
            {
                "elementType": "geometry.fill",
                "stylers": [
                    { "weight": 2 }
                ]
            }
        ];

        var position = new google.maps.LatLng(36.5099367, -4.8863523);

        var $mapOptions;
        $mapOptions = {
            center: position,
            zoom: 15,
            disableDefaultUI: true,
            backgroundColor: $mapObject.css('background-color'),       //Color used for the background of the Map div. This color will be visible when tiles have not yet loaded as the user pans. This option can only be set when the map is initialized.
            styles: styles,
            overviewMapControl: false,
            scrollwheel: false,                   //If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.
            mapTypeControl: false,
            streetViewControl: false,
            rotateControl: false,
            zoomControl: true,
            zoomControlOptions: {
                style: google.maps.ZoomControlStyle.DEFAULT
            },
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var $map;
        $map = new google.maps.Map(document.getElementById("google-map"), $mapOptions);

        var marker = new google.maps.Marker({
            position: position,
            map: $map,
            animation: google.maps.Animation.DROP
        });

        google.maps.event.addDomListener(window, 'resize', function() {
            $map.setCenter(position);
        });

}

function rgb2hex(rgb){
    if (rgb.indexOf("#") == -1){
        rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);

        return "#" +
            ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
            ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
            ("0" + parseInt(rgb[3],10).toString(16)).slice(-2);
    }
    else{
        return rgb;
    }
}



// Check if placeholder is supported
function isPlaceholder() {
	var inp = document.createElement('input');
	return ('placeholder' in inp);
}